// This is a temporary macro. First, check over the
// commands to make sure this is what you intended.
// Then, to run this macro, switch to the buffer
// where you would like to execute it and press C+m C+p.

void showDialog( View view ) {
  
  title = "Add or Remove Block Decorators";
  
  dialog = new JDialog(view, title, false);
  content = new JPanel(new BorderLayout());
  dialog.setContentPane(content);
  
  opPanel = new JPanel( new GridLayout(1,1) );
  
  prPanel = new JPanel(new GridLayout(1, 2));
  prLabel = new JLabel("Project base: ");
  prField = new JTextField( "src" );
  prPanel.add(prLabel);
  prPanel.add(prField);
  
  opPanel.add( prPanel );
  
  content.add(opPanel, BorderLayout.CENTER);
  
  buttonPanel = new JPanel(new GridLayout(1, 3));
  
  runButton = new JButton("Run");
  cancelButton = new JButton("Cancel");
  
  buttonPanel.add(runButton);
  buttonPanel.add(cancelButton);
  
  content.add(buttonPanel, BorderLayout.SOUTH);
  
  runButton.addActionListener(this);
  cancelButton.addActionListener(this);
  
  dialog.getRootPane().setDefaultButton(runButton);
  
  actionPerformed(e) {
    this.dialog.dispose();
    
    cmd = e.getActionCommand();
    
    if(cmd.equals("Run")){
		//decryptBuffer(this.pwField.getPassword());
		prepareDiffForPackage( view, this.prField.getText() );
	}
    
    return;
  }
  
  dialog.pack();
  dialog.setLocationRelativeTo(view);
  dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  dialog.setVisible(true);
}

void prepareDiffForPackage( View view, String projectBase ){
	//-- remove project base
	SearchAndReplace.setSearchString("/" + projectBase + "/");
	SearchAndReplace.setReplaceString("†");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	SearchAndReplace.setSearchString("^[^\\n†]+†");
	SearchAndReplace.setReplaceString("");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	//-- remove extensions
	SearchAndReplace.setSearchString("[.][^\\n.]+$");
	SearchAndReplace.setReplaceString("");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	//-- remove folders
	SearchAndReplace.setSearchString("^[^\\n/]+$");
	SearchAndReplace.setReplaceString("");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	//-- remove -meta files
	SearchAndReplace.setSearchString("-meta$");
	SearchAndReplace.setReplaceString("†");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	SearchAndReplace.setSearchString("^[^\\n†]+†$\n");
	SearchAndReplace.setReplaceString("");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
	
	//-- remove double lines
	SearchAndReplace.setSearchString("\\n([ \\t]*\\n)+");
	SearchAndReplace.setReplaceString("\\n");
	SearchAndReplace.setBeanShellReplace(false);
	SearchAndReplace.setIgnoreCase(true);
	SearchAndReplace.setRegexp(true);
	SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
	SearchAndReplace.replaceAll(view);
}

if(buffer.isReadOnly()){
	Macros.error( view, "Buffer is read-only." );
} else {
	showDialog(view);
}
