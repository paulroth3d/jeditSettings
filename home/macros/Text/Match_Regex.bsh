/**
 * keepOnlyRegex.bsh - Keeps only the specific text that matches the regex.
 * 
 * $Id$
 */
import gnu.regexp.*;
import javax.swing.border.*;

void showDialog( View view ){
	title = "Keep Only or Remove Only";
	
	dialog = new JDialog( view, title, false ); //defines the parent, title, and whether other dialogs can be active at the same time
	content = new JPanel( new BorderLayout() );
	content.setBorder( new EmptyBorder( 5,5,5,5 ) );
	dialog.setContentPane( content );
	
	formPanel = new JPanel( new GridLayout( 1,1 )); //defines the form as having only one input
	
	op1Panel = new JPanel( new GridLayout( 4,2 )); //defines the panel with a label and a field
	op1Label = new JLabel( "regex:" );
	op1Field = new JTextField( "<FONT COLOR=['\"][^'\"]+['\"]" );//"\\n[[][^[]+[[]([^]]+)");
	op1Panel.add( op1Label );
	op1Panel.add( op1Field );
	
	op2Label = new JLabel( "index:" );
	op2Field = new JTextField( "0" );
	op1Panel.add( op2Label );
	op1Panel.add( op2Field );
	
	op3Label = new JLabel( "Show Brackets: " );
	op3Field = new JCheckBox( "", true );
	op1Panel.add( op3Label );
	op1Panel.add( op3Field );
	
	op4Label = new JLabel( "All Buffers?: " );
	op4Field = new JCheckBox( "", false );
	op1Panel.add( op4Label );
	op1Panel.add( op4Field );
	
	formPanel.add( op1Panel ); //binds the panel with the input to the form
	
	content.add( formPanel, BorderLayout.CENTER ); //binds the form to the dialog, in the center
	
	buttonPanel = new JPanel(new GridLayout(1, 2));
	buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
	
	runButton = new JButton( "Run" );//defines the text on the button to Run
	cancelButton = new JButton( "Cancel" ); // ditto for Cancel
	
	buttonPanel.add( runButton );
	buttonPanel.add( cancelButton );
	
	content.add( buttonPanel, BorderLayout.SOUTH );
	
	runButton.addActionListener( this );
	cancelButton.addActionListener( this );
	
	dialog.getRootPane().setDefaultButton( runButton ); //defines the default button that will run when enter is pressed
	
	actionPerformed( e ){
		this.dialog.dispose(); //closes the dialog
		
		cmd = e.getActionCommand();
		
		int index;
		try {
			index = new Integer( op2Field.getText() );
		} catch( NumberFormatException err ){
			Macros.error( view, "index[" + op2Field.getText() + "] is not a number" );
		}
		
		if( cmd.equals( "Run" ) ){ //if the run button was pressed
			start( view, op1Field.getText(), index, op3Field.isSelected(), op4Field.isSelected() );
		} else {
			
		}
	}
	
	dialog.pack();
	dialog.setLocationRelativeTo( view );
	dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
	dialog.setVisible( true );
	
	return;
}

void start( View view, String myRegex, int index, boolean showBrackets, boolean allBuffers ){
	//Macros.message( view, "starting now" );
	//Macros.message( view, "index[" + index + "]" );
	//Macros.message( view, "showBrackets[" + showBrackets + "]" );
	this.view = view;
	
	String regex;
	RE re = null;
	StringBuilder builder = new StringBuilder( "" );// );
	
	regex = regexClean( myRegex );
	try {
		re = new RE( regex );
	} catch( REException err ){
		Macros.error( view, "Could not create regex[" + match + "]" );
	}
	
	builder.append( "matching[" ).append( myRegex ).append( "]" );
	
	if( !allBuffers ){
		matchBuffer( builder, buffer, re, index, showBrackets );
	} else {
		Buffer[] buffers = jEdit.getBuffers();
		//Macros.message( view, "Buffer.length:" + buffers.length );
		for( int i = 0; i < buffers.length; i++ ){
			matchBuffer( builder, buffers[i], re, index, showBrackets );
		}
	}
	
	newBuffer = jEdit.newFile(view);
	area = view.getTextArea();
	area.setText( builder.toString() ); 
	
	return;
}

void matchBuffer( StringBuilder result, Buffer aBuffer, RE re, int index, boolean showBrackets ){
	//Macros.message( view,  );
	result.append( "\n\nfile[" + aBuffer.getPath() + "]\nmatches[" );
	
	String bufferText = aBuffer.getText( 0, aBuffer.getLength() );
	REMatch[] matches;
	REMatch myMatch;
	
	matches = re.getAllMatches( bufferText, 0 );
	result.append( matches.length ).append( "]\n" );
	
	Log.log( Log.DEBUG, BeanShell.class, "Looking at:" + aBuffer.getPath() + " and Found " + matches.length + " matches" );
	if( matches.length > 0 ){
		Log.log( Log.DEBUG, BeanShell.class, "index:" + index + ", showBrackets:" + showBrackets );
		//Macros.message( view, "got matches" );
		int i = 0;
		if( showBrackets ){
			if( index == 0 ){
				for( i = 0; i < matches.length; i++ ){
					Log.log( Log.DEBUG, BeanShell.class, "looking at match[" + i + "]" );
					result.append( "[" ).append( i ).append( "][" ).append( matches[i].toString() ).append( "]\n" );
					//Macros.message( view, "After looking at match" );
				}
			} else {
				for( i = 0; i < matches.length; i++ ){
					result.append( "[" ).append( i ).append( "][" ).append( matches[i].toString( index ) ).append( "]\n" );
				}
			}
		} else {
			if( index == 0 ){
				for( i = 0; i < matches.length; i++ ){
					result.append( matches[i].toString() ).append( "\n" );
				}
			} else {
				for( i = 0; i < matches.length; i++ ){
					result.append( matches[i].toString( index ) ).append( "\n" );
				}
			}
		}
	}
}

String regexClean( String str ){
	char c;
	//Macros.message( view, "startClean" );
	StringBuilder output = new StringBuilder( "" );
	//Macros.message( view, "str.length:" + str.length() );
	for( int i = 0; i < str.length(); i++ ){
		c = str.charAt(i);
		//Macros.message( view, "c:" + c + "]" );
		if( c == '\\' ){
			//Macros.message( view, "Found backslash" );
			c = str.charAt(++i);
			if( c == '\\' ){
				output.append( "\\\\" );
			} else if( c == 'n' ){
				output.append( "\n" );
			} else if( c == 'r' ){
				output.append( "\r" );
			} else if( c == 't' ){
				output.append( "\t" );
			} else {
				output.append( "\\" ).append( c );
			}
		} else if( c == '*' ){
			output.append( "\\*" );
		} else {
			//Macros.message( view, "Could not identify" );
			output.append( c );
		}
	}
	Log.log( Log.DEBUG, BeanShell.class, "CleanedRegex: " + output.toString() );
	return( output.toString() );
}

if( buffer.isReadOnly() ){
	Macros.error( view, "Buffer is read-only, and cannot be modified" );
} else {
	showDialog( view ); //to show dialog uncomment this and comment next line
	//start( view );    //to not show dialog, uncomment this and comment prev line
}
