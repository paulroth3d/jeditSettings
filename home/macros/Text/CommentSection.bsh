/*
 * Rem_Block_Decorators.bsh - Removes the javadoc stars on a selection of text
 * 
 * $Id$
 */

import gnu.regexp.*;
import javax.swing.border.*;

void showDialog( View view ) {
  
  title = "Add or Remove Block Decorators";
  
  dialog = new JDialog(view, title, false);
  content = new JPanel(new BorderLayout());
  content.setBorder(new EmptyBorder(5, 5, 5, 5));
  dialog.setContentPane(content);
  
  opPanel = new JPanel( new GridLayout(2,1) );
  
  buttonPanel = new JPanel(new GridLayout(1, 3));
  buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
  
  addButton = new JButton("Add");
  remButton = new JButton("Remove");
  cancelButton = new JButton("Cancel");
  
  buttonPanel.add(addButton);
  buttonPanel.add(remButton);
  buttonPanel.add(cancelButton);
  
  content.add(buttonPanel, BorderLayout.SOUTH);
  
  addButton.addActionListener(this);
  remButton.addActionListener(this);
  cancelButton.addActionListener(this);
  
  dialog.getRootPane().setDefaultButton(addButton);
  
  actionPerformed(e) {
    this.dialog.dispose();
    
    cmd = e.getActionCommand();
    
    if(cmd.equals("Add")){
		//decryptBuffer(this.pwField.getPassword());
		start( view, true );
    } else if( cmd.equals("Remove")){
		start( view, false );
	}
    
    return;
  }
  
  dialog.pack();
  dialog.setLocationRelativeTo(view);
  dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  dialog.setVisible(true);
}

void start( View view, boolean add ){
	this.view = view;
	
	Selection[] selections = textArea.getSelection();
	Selection select;
	String selected;
	String result;
	int line = 0;
	
	//Macros.message( view, "number of lines selected = " + lines.length );
	
	if( selections == null || selections.length < 1 ){
		Macros.error( view, "No lines selected" );
		return( null );
	}
	
	for( int j = 0; j < selections.length; j++ ){
		select = selections[j];
		selected = textArea.getSelectedText( select );
		if( add == true ){
			result = addDecorators( selected);
		} else {
			Macros.message( view, "removeDecorators" );
			result = removeDecorators( selected );
		}
		textArea.setSelectedText( select, result );
	}
}

String addDecorators( String text ){
	RE startRE = null;
	RE endRE = null;
	try {
		startRE = new RE( "/\\*" );
		endRE = new RE( "\\*/" );
	} catch( REException err ){
		Macros.error( view, "failed regex:" + err );
		return( text );
	}
	
	try {
		text = startRE.substituteAll( text, "/#" );
		text = endRE.substituteAll( text, "#/" );
	} catch( REException err ){
		return( text );
	}
	
	text = "/*" + text + "*/";
	
	return( text );
}

String removeDecorators( String text ){
	RE actualStartRE = null;
	RE actualEndRE = null;
	RE stubStartRE = null;
	RE stubEndRE = null;
	
	try {
		actualStartRE = new RE( "/\\*" );
		actualEndRE = new RE( "\\*/" );
		stubStartRE = new RE( "/#" );
		stubEndRE = new RE( "#/" );
	} catch( REException err ){
		Macros.error( view, "failed regex:" + err );
		return( text );
	}
	
	try {
		text = actualStartRE.substituteAll( text, "" );
		text = actualEndRE.substituteAll( text, "" );
		text = stubStartRE.substituteAll( text, "/*" );
		text = stubEndRE.substituteAll( text, "*/" );
	} catch( REException err ){
		Macros.error( view, "failed replacement regex:" + err );
		return( text );
	}
	
	return( text );
}

if(buffer.isReadOnly()){
	Macros.error( view, "Buffer is read-only." );
} else {
	showDialog(view);
}
