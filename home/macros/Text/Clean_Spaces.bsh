/**
 * Clean_Spaces.bsh - 
 * 
 * $Id$
 */
import gnu.regexp.*;
import javax.swing.border.*;

/*
void showDialog( View view ){
	title = "Write WordWrap Into Text";
	
	dialog = new JDialog( view, title, false ); //defines the parent, title, and whether other dialogs can be active at the same time
	content = new JPanel( new BorderLayout() );
	content.setBorder( new EmptyBorder( 5,5,5,5 ) );
	dialog.setContentPane( content );
	
	formPanel = new JPanel( new GridLayout( 1,1 )); //defines the form as having only one input
	
	op1Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op1Label = new JLabel( "label:" );
	op1Field = new JTextField();
	op1Panel.add( op1Label );
	op1Panel.add( op1Field );
	
	formPanel.add( op1Panel ); //binds the panel with the input to the form
	
	content.add( formPanel, BorderLayout.CENTER ); //binds the form to the dialog, in the center
	
	buttonPanel = new JPanel(new GridLayout(1, 2));
	buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
	
	runButton = new JButton( "Run" );//defines the text on the button to Run
	cancelButton = new JButton( "Cancel" ); // ditto for Cancel
	
	buttonPanel.add( runButton );
	buttonPanel.add( cancelButton );
	
	content.add( buttonPanel, BorderLayout.SOUTH );
	
	runButton.addActionListener( this );
	cancelButton.addActionListener( this );
	
	dialog.getRootPane().setDefaultButton( runButton ); //defines the default button that will run when enter is pressed
	
	actionPerformed( e ){
		this.dialog.dispose(); //closes the dialog
		
		cmd = e.getActionCommand();
		
		if( cmd.equals( "Run" ) ){ //if the run button was pressed
			start( view );
		} else {
			
		}
	}
	
	dialog.pack();
	dialog.setLocationRelativeTo( view );
	dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
	dialog.setVisible( true );
	
	return;
}
*/

void start( View view ){
	//Macros.message( view, "starting now" );
	this.view = view;
	
	RE re = null;
	StringBuilder builder = new StringBuilder( "matches[" );
	REMatch[] matches;
	REMatch myMatch;
	String match;
	
	JEditTextArea area = view.getTextArea();
	String bufferText = area.getText( 0, area.getBufferLength() );
	//Macros.message( view, "bufferText:\n" + bufferText );
	
	try {
		re = new RE( "\n([ \t\r]+)([^\n]+)\n\n" );
	} catch( REException err ){
		Macros.error( view, "Could not create regex to find spaces" );
	}
	
	bufferText = re.substituteAll( bufferText, "\n$1$2\n$1\n" );
	bufferText = re.substituteAll( bufferText, "\n$1$2\n$1\n" ); //do it twice to fix the overlaps.
	
	area.setText( bufferText );
}

if( buffer.isReadOnly() ){
	Macros.error( view, "Buffer is read-only, and cannot be modified" );
} else {
	//showDialog( view ); //to show dialog uncomment this and comment next line
	start( view );    //to not show dialog, uncomment this and comment prev line
}
