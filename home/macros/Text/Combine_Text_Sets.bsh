/**
 * Combine_Text_Sets.bsh - Manages sets of text using multiple select.
 * 
 * $Id$
 */

import javax.swing.border.*;

void showDialog( View view ){
	title = "Write WordWrap Into Text";
	
	Selection[] selections = textArea.getSelection();
	int setCount = selections.length;
	if( selections.length < 2 ){
		Macros.error( view, "Make multiple selections to use\n\n(Ctrl-Shift /) Turn on Multiple Selections" );
		return;
	}
	
	String[] setLabels = new String[ selections.length ];
	for( int i = 0; i < selections.length; i++ ){
		setLabels[i] = "" + (i+1);
	}
	
	dialog = new JDialog( view, title, false ); //defines the parent, title, and whether other dialogs can be active at the same time
	content = new JPanel( new BorderLayout() );
	content.setBorder( new EmptyBorder( 5,5,5,5 ) );
	dialog.setContentPane( content );
	
	formPanel = new JPanel( new GridLayout( 4,1 )); //defines the form as having only one input
	
	op1Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op1Label = new JLabel( "Source:" );
	op1Field = new JComboBox( setLabels );
	op1Panel.add( op1Label );
	op1Panel.add( op1Field );
	formPanel.add( op1Panel ); //binds the panel with the input to the form
	
	op2Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op2Label = new JLabel( "Target:" );
	op2Field = new JComboBox( setLabels );
	op2Field.setSelectedIndex( selections.length-1 );
	op2Panel.add( op2Label );
	op2Panel.add( op2Field );
	formPanel.add( op2Panel ); //binds the panel with the input to the form
	
	op3Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op3Label = new JLabel( "Action:" );
	String[] actionLabels = { "Combine", "Difference", "Intersection" };
	op3Field = new JComboBox( actionLabels );
	op3Panel.add( op3Label );
	op3Panel.add( op3Field );
	formPanel.add( op3Panel ); //binds the panel with the input to the form
	
	op4Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op4Label = new JLabel( "Create New:" );
	op4Field = new JCheckBox("", true);
	op4Panel.add( op4Label );
	op4Panel.add( op4Field );
	formPanel.add( op4Panel ); //binds the panel with the input to the form
	
	content.add( formPanel, BorderLayout.CENTER ); //binds the form to the dialog, in the center
	
	buttonPanel = new JPanel(new GridLayout(1, 2));
	buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
	
	runButton = new JButton( "Run" );//defines the text on the button to Run
	cancelButton = new JButton( "Cancel" ); // ditto for Cancel
	
	buttonPanel.add( runButton );
	buttonPanel.add( cancelButton );
	
	content.add( buttonPanel, BorderLayout.SOUTH );
	
	runButton.addActionListener( this );
	cancelButton.addActionListener( this );
	
	dialog.getRootPane().setDefaultButton( runButton ); //defines the default button that will run when enter is pressed
	
	actionPerformed( e ){
		this.dialog.dispose(); //closes the dialog
		
		cmd = e.getActionCommand();
		
		if( cmd.equals( "Run" ) ){ //if the run button was pressed
			if( op1Field.getSelectedIndex() == op2Field.getSelectedIndex() ){
				Macros.error( view, "Combining/Differencing/etc. does not make sense with the same set" );
				return;
			}
			
			//int source = op1Field.getSelectedIndex();
			//int target = op2Field.getSelectedIndex();
			Selection source = selections[ op1Field.getSelectedIndex() ];
			Selection target = selections[ op2Field.getSelectedIndex() ];
			String action = actionLabels[ op3Field.getSelectedIndex() ];
			start( view, source, target, action, op4Field.isSelected() );
		} else {
			//do nothing.
		}
	}
	
	dialog.pack();
	dialog.setLocationRelativeTo( view );
	dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
	dialog.setVisible( true );
	
	return;
}

//void start( View view ){
void start( View view, Selection source, Selection target, String action, boolean createNew ){
	//Macros.message( view, "starting now" );
	this.view = view;
	
	String delimiter = "\n";
	
	//String sourceStr = "line1\nline2\nline3\nline4";
	//String targetStr = "line1\nline1a\nline2\nline2b";
	//String action = "Combine";
	
	//Selection[] selections = textArea.getSelection();
	//Selection source = selections[ sourceIndex ];
	//Selection target = selections[ targetIndex ];
	
	String sourceStr = textArea.getSelectedText( source );
	String targetStr = textArea.getSelectedText( target );
	
	String[] sourceText = explodeString( sourceStr, delimiter );
	String[] targetText = explodeString( targetStr, delimiter );
	StringBuilder output;
	
	/*
	for( int i = 0; i < sourceText.length; i++ ){
		Macros.message( view, "sourceText[" + i + "][" + sourceText[i] + "]" );
	}
	for( int i = 0; i < targetText.length; i++ ){
		Macros.message( view, "targetText[" + i + "][" + targetText[i] + "]" );
	}
	*/
	
	//"Combine", "Difference", "Intersection"
	if( action.equals( "Intersection" )){
		//Macros.message( view, "Intersection called" );
		output = intersection( sourceText, targetText, delimiter );
	} else if( action.equals( "Difference" )){
		//Macros.message( view, "Difference called" );
		output = difference( sourceText, targetText, delimiter );
	} else {
		//Macros.message( view, "Combine called" );
		output = combine( sourceText, targetText, delimiter );
	}
	
	if( createNew ){
		//Macros.message( view, "Create new" );
		newBuffer = jEdit.newFile(view);
		view.getTextArea().setText( output.toString() );
	} else {
		//Macros.message( view, "begin[" + target.getStart() + "] end[" + target.getEnd() + "]" );
		textArea.setSelectedText( target, output.toString() );
		textArea.resizeSelection( target.getStart(), target.getStart() + output.length(), 0, false );
	}
}

StringBuilder combine( String[] source, String[] target, String delimiter ){
	StringBuilder result = new StringBuilder( target[0] );
	//String[] result = new String[ source.length + target.length ];
	
	for( int i = 1; i < target.length; i++ ){
		result.append( delimiter ).append( target[i] );
	}
	
	for( int i = 0; i < source.length; i++ ){
		if( !hasString( target, source[i] )){
			//Macros.message( view, "target does not have string[" + source[i] + "]" );
			result.append( delimiter ).append( source[i] );
		} else {
			//Macros.message( view, "target has string[" + source[i] + "]" );
		}
	}
	return( result );
}

StringBuilder difference( String[] source, String[] target, String delimiter ){
	StringBuilder result = new StringBuilder();
	boolean isStarting = true;
	
	for( int i = 0; i < target.length; i++ ){
		if( !hasString( source, target[i] )){
			//Macros.message( view, "source does not have string[" + target[i] + "]" );
			if( isStarting ){
				isStarting = false;
			} else {
				result.append( delimiter );
			}
			result.append( target[i] );
		} else {
			//Macros.message( view, "source has string[" + target[i] + "]" );
		}
	}
	
	return( result );
}

StringBuilder intersection( String[] source, String[] target, String delimiter ){
	StringBuilder result = new StringBuilder();
	boolean isStarting = true;
	
	for( int i = 0; i < target.length; i++ ){
		if( hasString( source, target[i] )){
			//Macros.message( view, "source has string[" + target[i] + "]" );
			if( isStarting ){
				isStarting = false;
			} else {
				result.append( delimiter );
			}
			result.append( target[i] );
		} else {
			//Macros.message( view, "source does not have string[" + target[i] + "]" );
		}
	}
	
	return( result );
}

String[] explodeString( String source, String delimiter ){
	int lineCount = substringCount( source, delimiter );
	//Macros.message( view, "lineCount:" + lineCount );
	String[] result = new String[ lineCount ];
	//result[0] = source;
	
	int oldIndex;
	int newIndex = source.indexOf( delimiter );
	//Macros.message( view, "startingIndex[" + newIndex + "]" );
	int count = 0;
	
	while( newIndex >= 0 ){
		result[count++] = source.substring( oldIndex, newIndex ).trim(); //removes not only the line delimiter but additional spacing
		//Macros.message( view, "found[" + (count-1) + "][" + result[count-1] + "]" );
		
		oldIndex = newIndex;
		newIndex = source.indexOf( delimiter, newIndex + delimiter.length() );
		//Macros.message( view, "newIndex:" + findIndex );
	}
	
	result[count] = source.substring( oldIndex ).trim();
	//Macros.message( view, "found[" + count + "][" + result[count] + "]" );
	
	return( result );
}

int substringCount( String source, String substr ){
	int findIndex = source.indexOf( substr );
	int count = 1;
	while( findIndex >= 0 ){
		count++;
		findIndex = source.indexOf( substr, findIndex + substr.length() );
		//Macros.message( view, "newIndex:" + findIndex );
	}
	return( count );
}

boolean hasString( String[] source, String needle ){
	for( var i = 0; i < source.length; i++ ){
		//Macros.message( view, "check[" + i + "][" + source[i] + "]\nfor[" + needle + "]" );
		if( needle.equals( source[i] )){
			return( true );
		}
	}
	return( false );
}

if( buffer.isReadOnly() ){
	Macros.error( view, "Buffer is read-only, and cannot be modified" );
} else {
	showDialog( view ); //to show dialog uncomment this and comment next line
	//start( view );    //to not show dialog, uncomment this and comment prev line
}
