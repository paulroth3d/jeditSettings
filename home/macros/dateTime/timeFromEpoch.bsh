/**
 * .bsh - 
 * 
 * $Id$
 */

import javax.swing.border.*;
import java.text.DateFormat;

void showDialog( View view ){
	title = "TimeStamp from Epoch";
	
	dialog = new JDialog( view, title, false ); //defines the parent, title, and whether other dialogs can be active at the same time
	content = new JPanel( new BorderLayout() );
	content.setBorder( new EmptyBorder( 5,5,5,5 ) );
	dialog.setContentPane( content );
	
	formPanel = new JPanel( new GridLayout( 1,1 )); //defines the form as having only one input
	
	op1Panel = new JPanel( new GridLayout( 1,2 )); //defines the panel with a label and a field
	op1Label = new JLabel( "time:" );
	op1Field = new JTextField();
	op1Panel.add( op1Label );
	op1Panel.add( op1Field );
	
	formPanel.add( op1Panel ); //binds the panel with the input to the form
	
	content.add( formPanel, BorderLayout.CENTER ); //binds the form to the dialog, in the center
	
	buttonPanel = new JPanel(new GridLayout(1, 2));
	buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
	
	runButton = new JButton( "Run" );//defines the text on the button to Run
	cancelButton = new JButton( "Cancel" ); // ditto for Cancel
	
	buttonPanel.add( runButton );
	buttonPanel.add( cancelButton );
	
	content.add( buttonPanel, BorderLayout.SOUTH );
	
	runButton.addActionListener( this );
	cancelButton.addActionListener( this );
	
	dialog.getRootPane().setDefaultButton( runButton ); //defines the default button that will run when enter is pressed
	
	actionPerformed( e ){
		this.dialog.dispose(); //closes the dialog
		
		cmd = e.getActionCommand();
		
		if( cmd.equals( "Run" ) ){ //if the run button was pressed
			start( view, op1Field.text, null );
		} else {
			
		}
	}
	
	dialog.pack();
	dialog.setLocationRelativeTo( view );
	dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
	dialog.setVisible( true );
	
	return;
}

void start( View view, String timeStr, Selection sel ){
	this.view = view;
	var myTime;
	
	try {
		myTime = new Long( timeStr ).longValue() - 21600000;
	} catch( Exception err ){
		Macros.message( view, "Could not parse string:" + timeStr );
		return;
	}
	
	var myFormat = DateFormat.getDateTimeInstance();
	var myDate = new Date( myTime );
	var dateStr = myFormat.format( myDate );
	Macros.message( view, "timeString[" + timeStr + "][" + myDate + "]:" + dateStr );
	
	if( sel != null ){
		textArea.setSelectedText( sel, timeStr + ":" + dateStr );
	}
}

Selection[] selections = textArea.getSelection();
//Macros.message( view, "Number of selections:" + selections.length );
if( selections.length == 0 ){
	showDialog( view ); //to show dialog uncomment this and comment next line
} else {
	start( view, textArea.getSelectedText( selections[0] ), selections[0] );
}
