/**
 * .bsh - Adds two long numbers together
 * 
 * $Id$
 */
import gnu.regexp.*;
import java.util.LinkedList;
import javax.swing.border.*;

void showDialog( View view, String bText, Selection sel ){
	title = "Keep Only or Remove Only";
	
	bufferText = bText;
	selection = sel;
	
	dialog = new JDialog( view, title, false ); //defines the parent, title, and whether other dialogs can be active at the same time
	content = new JPanel( new BorderLayout() );
	content.setBorder( new EmptyBorder( 5,5,5,5 ) );
	dialog.setContentPane( content );
	
	formPanel = new JPanel( new GridLayout( 1,1 )); //defines the form as having only one input
	
	op1Panel = new JPanel( new GridLayout( 4,2 )); //defines the panel with a label and a field
	op1Label = new JLabel( "Function Name:" );
	op1Field = new JTextField( "myFunc" );
	op1Panel.add( op1Label );
	op1Panel.add( op1Field );
	
	formPanel.add( op1Panel ); //binds the panel with the input to the form
	
	content.add( formPanel, BorderLayout.CENTER ); //binds the form to the dialog, in the center
	
	buttonPanel = new JPanel(new GridLayout(1, 2));
	buttonPanel.setBorder( new EmptyBorder(5, 0, 0, 0));
	
	runButton = new JButton( "Run" );//defines the text on the button to Run
	cancelButton = new JButton( "Cancel" ); // ditto for Cancel
	
	buttonPanel.add( runButton );
	buttonPanel.add( cancelButton );
	
	content.add( buttonPanel, BorderLayout.SOUTH );
	
	runButton.addActionListener( this );
	cancelButton.addActionListener( this );
	
	dialog.getRootPane().setDefaultButton( runButton ); //defines the default button that will run when enter is pressed
	
	actionPerformed( e ){
		
		cmd = e.getActionCommand();
		this.dialog.dispose(); //closes the dialog
		
		if( cmd.equals( "Run") && selections.length > 0){ //if the run button was pressed
			start( view, op1Field.getText(), bufferText, selection );
		} else {
			
		}
	}
	
	dialog.pack();
	dialog.setLocationRelativeTo( view );
	dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
	dialog.setVisible( true );
	
	return;
}

void start( View view, String functionName, String bufferText, Selection sel ){
	//Macros.message( view, "start" );
	String tStr;
	StringBuilder output = new StringBuilder( "" );
	//Macros.message( view, "before parameters" );
	String[] parameters = getParameters( bufferText );
	//Macros.message( view, "after parameters" );
	
	if( parameters.length > 0 ){
		output.append( "$" ).append( parameters[0] );
	}
	for( int i = 1; i < parameters.length; i++ ){
		output.append( ", $" ).append( parameters[i] );
	}
	String paramStr = output.toString();
	output = new StringBuilder("");
	
	output.append( "QF::" ).append( functionName ).append( "( " ).append( paramStr ).append( ");\n" );
	output.append( "public static function " ).append( functionName.trim() ).append( "(" ).append( paramStr ).append( "){\n" );
	output.append( "\treturn( \"" ).append( bufferText.trim() ).append( "\" );\n" );
	output.append( "}" );
	
	textArea.setSelectedText( sel, output.toString() );
	
	//textArea.setSelectedText( sel, bufferText + ":" + (long1+long2) );
}

String[] getParameters( String query ){
	//Macros.message( view, "starting parameters" );
	RE re = null;
	REMatch[] matches;
	REMatch myMatch;
	String reSrc;
	String[] results;
	
	reSrc = "[$](\\w+)";
	try {
		re = new RE( reSrc );
	} catch( REException err ){
		Macros.error( view, "Could not create regex[" + reSrc + "]" );
	}
	
	matches = re.getAllMatches( query, 0 );
	/*if( matches.length > 0 ){
		Macros.message( view, "Found parameters" );
	} else {
		Macros.message( view, "No parameters found" );
	}*/
	
	results = new String[ matches.length ];
	for( int i = 0; i < matches.length; i++ ){
		results[i] = matches[i].toString(1);
	}
	
	return( results );
}

Selection[] selections = textArea.getSelection();
//start( view, textArea.getSelectedText( selections[0] ), selections[0] );
showDialog( view, textArea.getSelectedText( selections[0] ), selections[0] );
